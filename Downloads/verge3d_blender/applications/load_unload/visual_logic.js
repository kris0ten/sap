/**
 * Generated by Verge3D Puzzles v.3.8.1
 * Sun Oct 03 2021 10:33:08 GMT+0300 (Moscow Standard Time)
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();

var PL = v3d.PL = v3d.PL || {};

// a more readable alias for PL (stands for "Puzzle Logic")
v3d.puzzles = PL;

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    var PROC = {
    
};


    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["startPreloader"] = startPreloader;
this.procedures["updatePreloader"] = updatePreloader;
this.procedures["endPreloader"] = endPreloader;

var PROC = {
    "startPreloader": startPreloader,
    "updatePreloader": updatePreloader,
    "endPreloader": endPreloader,
};

var loaded_scenes, percentage;


// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}



// dictSet puzzle
function dictSet(dict, key, value) {
    if (dict && typeof dict == 'object')
        dict[key] = value;
}



// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}


// Describe this function...
function startPreloader() {
  setHTMLElemStyle('filter', 'blur(8px)', ['QUERYSELECTOR', '#v3d-container > canvas'], false);
  registerSetTimeout(0.1, function() {
    setHTMLElemStyle('display', 'block', 'preloader', false);
    setHTMLElemStyle('width', '0%', 'preloader_bar', false);
  });
}

// Describe this function...
function updatePreloader(percentage) {
  setHTMLElemStyle('width', String(percentage) + '%', 'preloader_bar', false);
}

// Describe this function...
function endPreloader() {
  registerSetTimeout(0.1, function() {
    setHTMLElemStyle('filter', 'blur(0px)', ['QUERYSELECTOR', '#v3d-container > canvas'], false);
    setHTMLElemStyle('display', 'none', 'preloader', false);
  });
}


// getHTMLElemAttribute puzzle
function getHTMLElemAttribute(attr, id, isParent) {
    var elem = getElement(id, isParent);
    return elem ? elem[attr]: '';
}



// loadScene puzzle
function loadScene(url, sceneName, loadCb, progCb, errorCb) {

    appInstance.unload();

    // clean object cache
    _pGlob.objCache = {};

    _pGlob.percentage = 0;
    appInstance.loadScene(url, function(loadedScene) {
        appInstance.enableControls();
        loadedScene.name = sceneName;

        _pGlob.percentage = 100;
        loadCb();
    }, function(percentage) {
        _pGlob.percentage = percentage;
        progCb();
    }, errorCb);
}



// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, eventType, callback]);
    }
}



// dictGet puzzle
function dictGet(dict, key) {
    if (dict && typeof dict == 'object')
        return dict[key];
}



// isSceneLoaded puzzle
function isSceneLoaded(url) {
    if (appInstance.scene) {
        var scene = url === '' ? appInstance.scene : appInstance.scene.getObjectByName(url);
        if (scene)
            return true;
        else
            return false;
    } else {
        return false;
    }
}




// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return obj.type !== 'AmbientLight' &&
           obj.name !== '' &&
           !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
           !obj.isAuxClippingMesh;
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    appInstance.scene.traverse(function(obj) {
        if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
            objFound = obj;
            if (runTime) {
                _pGlob.objCache[objName] = objFound;
            }
        }
    });
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc.filter(function(name) {
        return name;
    });
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}




// snapToObject puzzle
function snapToObject(objName, targetObjName) {
    if (!objName || !targetObjName)
        return;
    var obj = getObjectByName(objName);
    var targetObj = getObjectByName(targetObjName);
    if (!obj || !targetObj)
        return;
    obj.copyTransform(targetObj);
    obj.updateMatrixWorld(true);
}



// appendScene puzzle
function appendScene(url, sceneName, loadCameras, loadLights, loadCb, progCb, errorCb) {
    _pGlob.percentage = 0;

    appInstance.appendScene(url, function(loadedScene) {
        loadedScene.name = sceneName;
        _pGlob.percentage = 100;
        loadCb();
    }, function(percentage) {
        _pGlob.percentage = percentage;
        progCb();
    }, errorCb, loadCameras, loadLights);
}



// unloadScene puzzle
function unloadScene(url) {
    if (appInstance.scene) {
        var scene = url === '' ? appInstance.scene : appInstance.scene.getObjectByName(url);
        if (scene) appInstance.unload(scene);

        if (!appInstance.scene) appInstance.renderer.clear();

        // clean object cache
        _pGlob.objCache = {};
    }
}



setHTMLElemStyle('transform', 'scale(1.03)', ['QUERYSELECTOR', '#v3d-container > canvas'], false);
setHTMLElemStyle('transition', 'filter 0.3s ease-in', ['QUERYSELECTOR', '#v3d-container > canvas'], false);

loaded_scenes = {};
dictSet(loaded_scenes, 'chair', false);
dictSet(loaded_scenes, 'puff', false);
dictSet(loaded_scenes, 'table', false);
dictSet(loaded_scenes, 'tv_stand', false);
dictSet(loaded_scenes, 'nightlight', false);

eventHTMLElem('click', 'button_load', false, function(event) {
  startPreloader();
  registerSetTimeout(0.3, function() {
    loadScene(String(getHTMLElemAttribute('value', 'scene_selector', false)) + '.gltf', String(getHTMLElemAttribute('value', 'scene_selector', false)) + '.gltf', function() {
      endPreloader();
    }, function() {
      updatePreloader(Math.round(_pGlob.percentage));
    }, function() {});
  });
});

eventHTMLElem('click', 'button_add', false, function(event) {
  if (dictGet(loaded_scenes, getHTMLElemAttribute('value', 'scene_selector', false)) == false) {
    startPreloader();
    registerSetTimeout(0.3, function() {
      if (isSceneLoaded('')) {
        appendScene(String(getHTMLElemAttribute('value', 'scene_selector', false)) + '.gltf', String(getHTMLElemAttribute('value', 'scene_selector', false)) + '.gltf', false, false, function() {
          endPreloader();
          snapToObject(String(getHTMLElemAttribute('value', 'scene_selector', false)) + '_base', String(getHTMLElemAttribute('value', 'scene_selector', false)) + '_place');
          dictSet(loaded_scenes, getHTMLElemAttribute('value', 'scene_selector', false), true);
          console.log(String(getHTMLElemAttribute('value', 'scene_selector', false)) + '_base');
        }, function() {
          updatePreloader(Math.round(_pGlob.percentage));
        }, function() {});
      } else {
        loadScene(String(getHTMLElemAttribute('value', 'scene_selector', false)) + '.gltf', String(getHTMLElemAttribute('value', 'scene_selector', false)) + '.gltf', function() {
          endPreloader();
        }, function() {
          updatePreloader(Math.round(_pGlob.percentage));
        }, function() {});
      }
    });
  }
});

eventHTMLElem('click', 'button_unload', false, function(event) {
  if (dictGet(loaded_scenes, getHTMLElemAttribute('value', 'scene_selector', false)) == true) {
    unloadScene(String(getHTMLElemAttribute('value', 'scene_selector', false)) + '.gltf');
    dictSet(loaded_scenes, getHTMLElemAttribute('value', 'scene_selector', false), false);
  }
});



} // end of PL.init function

})(); // end of closure

/* ================================ end of code ============================= */
